// Load processes parameters
includeConfig 'conf/base.config'
// Load resources configuration
includeConfig 'conf/resources.config'
// Load nextflow workflow report parameters
includeConfig 'conf/reports.config'

// Workdir for temporary data
workDir = "${baseDir}/tmp_CELIA/$params.projectName"

// Git informations of workflow
manifest {
  name = 'CELIA'
  author = 'Alexandre Cormier, IFREMER-IRSI-SeBiMER'
  description = 'automatiC gEnome assembLy marIne prokAryotes workflow developped by Ifremer SeBiMER team'
  homePage = 'https://gitlab.ifremer.fr/bioinfo/CELIA'
  mainScript = 'main.nf'
  nextflowVersion = '>=20.01.0'
  version = '1.0.0'
}

// Execution profiles
profiles {
    custom {
        includeConfig 'conf/custom.config'
        includeConfig 'conf/reports.config'
        // Workdir for temporary data
        workDir = "${baseDir}/work/$params.projectName"
    }
    docker {
        docker {
             enabled = true
             fixOwnership = true
             runOptions = "-u \$(id -u):\$(id -g)"
        }
        process {
            withLabel : biopython {
                container = "sebimer/biopython:1.78"
            }
            withLabel : busco {
                container = "ezlabgva/busco:v5.1.3_cv1"
            }
            withLabel : fastqc {
                container = "quay.io/biocontainers/fastqc:0.11.9--hdfd78af_1"
            }
            withLabel : bandage {
                container = "quay.io/biocontainers/bandage:0.8.1--hc9558a2_2"
            }
            withLabel : multiqc {
                container = "quay.io/biocontainers/multiqc:1.10.1--pyhdfd78af_1"
            }
            withLabel : blast {
                container = "quay.io/biocontainers/blast:2.11.0--pl5262h3289130_1"
            }
            withLabel : bowtie2 {
                container = "sebimer/bowtie2:2.4.4"
            }
            withLabel : fastani {
                container = "quay.io/biocontainers/fastani:1.32--he1c1bb9_0"
            }
            withLabel : mosdepth {
                container = "quay.io/biocontainers/mosdepth:0.3.1--h01d7912_2"
            }
            withLabel : platon {
                container = "quay.io/biocontainers/platon:1.6--pyhdfd78af_1"
            }
            withLabel : prokka {
                container = "quay.io/biocontainers/prokka:1.14.6--pl5262hdfd78af_1"
            }
            withLabel : unicycler {
                container = "quay.io/biocontainers/unicycler:0.4.4--py36h61628e2_4"
            }
        }

        singularity.enabled = false
    }
    singularity {
        docker.enabled = false
        singularity.autoMounts = true
        singularity.enabled = true
        process {
            withLabel : biopython {
                container = "sebimer/biopython:1.78"
            }
            withLabel : busco {
                container = "ezlabgva/busco:v5.1.3_cv1"
            }
            withLabel : fastqc {
                container = "quay.io/biocontainers/fastqc:0.11.9--hdfd78af_1"
            }
            withLabel : bandage {
                container = "quay.io/biocontainers/bandage:0.8.1--hc9558a2_2"
            }
            withLabel : multiqc {
                container = "quay.io/biocontainers/multiqc:1.10.1--pyhdfd78af_1"
            }
            withLabel : blast {
                container = "quay.io/biocontainers/blast:2.11.0--pl5262h3289130_1"
            }
            withLabel : bowtie2 {
                container = "sebimer/bowtie2:2.4.4"
            }
            withLabel : fastani {
                container = "quay.io/biocontainers/fastani:1.32--he1c1bb9_0"
            }
            withLabel : mosdepth {
                container = "quay.io/biocontainers/mosdepth:0.3.1--h01d7912_2"
            }
            withLabel : platon {
                container = "quay.io/biocontainers/platon:1.6--pyhdfd78af_1"
            }
            withLabel : prokka {
                container = "quay.io/biocontainers/prokka:1.14.6--pl5262hdfd78af_1"
            }
            withLabel : unicycler {
                container = "quay.io/biocontainers/unicycler:0.4.4--py36h61628e2_4"
            }
        }
    }
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}